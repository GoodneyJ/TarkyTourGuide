[{"C:\\Users\\jarro\\Desktop\\DEV\\PORTFOLIO\\portfolio 2020\\EFT-EXPRESS\\client\\src\\index.js":"1","C:\\Users\\jarro\\Desktop\\DEV\\PORTFOLIO\\portfolio 2020\\EFT-EXPRESS\\client\\src\\buttonComponent.js":"2","C:\\Users\\jarro\\Desktop\\DEV\\PORTFOLIO\\portfolio 2020\\EFT-EXPRESS\\client\\src\\ammo.js":"3","C:\\Users\\jarro\\Desktop\\DEV\\PORTFOLIO\\portfolio 2020\\EFT-EXPRESS\\client\\src\\customsMap.js":"4","C:\\Users\\jarro\\Desktop\\DEV\\PORTFOLIO\\portfolio 2020\\EFT-EXPRESS\\client\\src\\App.js":"5","C:\\Users\\jarro\\Desktop\\DEV\\PORTFOLIO\\portfolio 2020\\EFT-EXPRESS\\client\\src\\keys.js":"6","C:\\Users\\jarro\\Desktop\\DEV\\PORTFOLIO\\portfolio 2020\\EFT-EXPRESS\\client\\src\\navbar.js":"7","C:\\Users\\jarro\\Desktop\\DEV\\PORTFOLIO\\portfolio 2020\\EFT-EXPRESS\\client\\src\\maps.js":"8","C:\\Users\\jarro\\Desktop\\DEV\\PORTFOLIO\\portfolio 2020\\EFT-EXPRESS\\client\\src\\buttonResults.js":"9","C:\\Users\\jarro\\Desktop\\DEV\\PORTFOLIO\\portfolio 2020\\EFT-EXPRESS\\client\\src\\reportWebVitals.js":"10","C:\\Users\\jarro\\Desktop\\DEV\\PORTFOLIO\\portfolio 2020\\EFT-EXPRESS\\client\\src\\woodsMap.js":"11","C:\\Users\\jarro\\Desktop\\DEV\\PORTFOLIO\\portfolio 2020\\EFT-EXPRESS\\client\\src\\home.js":"12","C:\\Users\\jarro\\Desktop\\DEV\\PORTFOLIO\\portfolio 2020\\EFT-EXPRESS\\client\\src\\threads.js":"13"},{"size":500,"mtime":1609625070153,"results":"14","hashOfConfig":"15"},{"size":2023,"mtime":1612141005334,"results":"16","hashOfConfig":"15"},{"size":6701,"mtime":1612129824274,"results":"17","hashOfConfig":"15"},{"size":789,"mtime":1609367359157,"results":"18","hashOfConfig":"15"},{"size":918,"mtime":1612237200668,"results":"19","hashOfConfig":"15"},{"size":4429,"mtime":1612129577309,"results":"20","hashOfConfig":"15"},{"size":1871,"mtime":1612213269355,"results":"21","hashOfConfig":"15"},{"size":1872,"mtime":1609368947797,"results":"22","hashOfConfig":"15"},{"size":2344,"mtime":1612140125226,"results":"23","hashOfConfig":"15"},{"size":362,"mtime":1607366583162,"results":"24","hashOfConfig":"15"},{"size":663,"mtime":1609367747066,"results":"25","hashOfConfig":"15"},{"size":2649,"mtime":1612240654892,"results":"26","hashOfConfig":"15"},{"size":174,"mtime":1612238743923,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"9b5c5e",{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"34"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"34"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\jarro\\Desktop\\DEV\\PORTFOLIO\\portfolio 2020\\EFT-EXPRESS\\client\\src\\index.js",[],["62","63"],"C:\\Users\\jarro\\Desktop\\DEV\\PORTFOLIO\\portfolio 2020\\EFT-EXPRESS\\client\\src\\buttonComponent.js",["64"],"import React, { Component } from 'react'\r\nimport ButtonResults from './buttonResults.js'\r\n\r\nexport default class ButtonComponent extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            expanded: false,\r\n        }\r\n\r\n        this.expandedToggleSwitch = this.expandedToggleSwitch.bind(this);\r\n        this.fadeOutAnimation = this.fadeOutAnimation.bind(this);\r\n    }\r\n\r\n    fadeOutAnimation = () => {\r\n        document.getElementById(\"simpleModal\").classList.remove('fadeIn')\r\n        document.getElementById(\"simpleModal\").classList.add('fadeOut')\r\n    }\r\n\r\n    expandedToggleSwitch = () => {\r\n        if(this.state.expanded) {\r\n            document.querySelector('.modal').style.animation = \"fadeOut 250ms\"\r\n            setTimeout(function() {\r\n                this.setState({\r\n                    expanded: false\r\n                })\r\n            }.bind(this), 240);\r\n            \r\n        } else {\r\n            this.setState({\r\n                expanded: true\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n       let filteredButtonStyles = {\r\n           fontSize: '1.5rem',\r\n           fontWeight: 700,\r\n\r\n       }\r\n\r\n       let styles = {\r\n           card: {\r\n               backgroundImage: `url(${this.props.backgroundThumbnail})`,\r\n               backgroundSize: 'cover',\r\n               \r\n\r\n           }\r\n       }\r\n       \r\n        return (\r\n            <div>\r\n                <a className='filter-button' href=\"#\" onClick={this.expandedToggleSwitch}>\r\n                    <div className ='card ammo-type-header' style={styles.card}>\r\n                        <p style={filteredButtonStyles}> \r\n                                {this.state.expanded ? <ButtonResults stateList={this.props.stateList} buttonTitleProp={this.props.buttonTitleProp} listType={this.props.listType}/> : <p className=\"card-title\">{this.props.buttonTitleProp}</p>} \r\n                        </p>\r\n                    </div>\r\n                </a>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n",["65","66"],"C:\\Users\\jarro\\Desktop\\DEV\\PORTFOLIO\\portfolio 2020\\EFT-EXPRESS\\client\\src\\ammo.js",["67"],"import React, { Component } from 'react'\r\nimport axios from 'axios'; \r\nimport ButtonComponent from './buttonComponent.js'\r\nimport Asval from './IMAGES/ASVAL.png'\r\nimport M590 from './IMAGES/M590.png'\r\nimport MP7 from './IMAGES/MP7.png'\r\nimport P90 from './IMAGES/P90.png'\r\nimport AK103 from './IMAGES/AK103.png'\r\nimport HK416 from './IMAGES/HK416.png'\r\nimport KS23 from './IMAGES/KS23.png'\r\nimport APS from './IMAGES/APS.png'\r\nimport ASH from './IMAGES/ASH.png'\r\nimport Mosin from './IMAGES/MOSIN.png'\r\nimport Shrimp from './IMAGES/SHRIMP.png'\r\nimport Vector from './IMAGES/VECTOR.png'\r\nimport VPO from './IMAGES/VPO.png'\r\nimport UMP from './IMAGES/UMP.png'\r\nimport PPSH from './IMAGES/PPSH.png'\r\nimport SR25 from './IMAGES/SR25.png'\r\nimport TOZ from './IMAGES/TOZ.png'\r\nimport AK74M from './IMAGES/74M.png'\r\n\r\n\r\n\r\nexport default class ammo extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n\r\n            input: '',\r\n            ammoList: []\r\n        }\r\n\r\n        //Function binds for 'this'\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.getAmmoList = this.getAmmoList.bind(this);\r\n\r\n    };\r\n\r\n\r\n\r\n    //CALLS AXIOS GET FUNCTION\r\n    componentDidMount = () => {\r\n        this.getAmmoList();\r\n    }\r\n\r\n    //INPUT STORAGE\r\n    handleChange = (event) => {\r\n            this.setState({input: event.target.value});\r\n    }\r\n    //RETRIEVES AMMO LIST FROM API\r\n    getAmmoList = () => {\r\n        axios.get('/ammo')\r\n            .then((response) => {\r\n                const data = response.data;\r\n                this.setState({ammoList: data})\r\n                console.log('Ammo-Data has been received!');\r\n            })\r\n            .catch(() => {\r\n                console.log('Ammo-Data was not recieved.');\r\n            });  \r\n    }\r\n\r\n    render() {\r\n\r\n\r\n        if(this.state.input === '') {\r\n            return (\r\n                <div id='bruh'>\r\n                    <input className='input' name=\"ammo\" type='text' placeholder=\"What type of ammo do you need?\" value={this.state.input} onChange={this.handleChange} />\r\n                    <div id=\"button-container\">\r\n                        <div className=\"row\">\r\n                            <ButtonComponent stateList={this.state.ammoList} buttonTitleProp='.45' listType=\"ammo\" backgroundThumbnail={UMP}/>\r\n                            <ButtonComponent stateList={this.state.ammoList} buttonTitleProp='4.6x30' listType=\"ammo\" backgroundThumbnail={MP7}/>\r\n                            <ButtonComponent stateList={this.state.ammoList} buttonTitleProp='5.45x39' listType=\"ammo\" backgroundThumbnail={AK74M}/>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <ButtonComponent stateList={this.state.ammoList} buttonTitleProp='5.56x45' listType=\"ammo\" backgroundThumbnail={HK416}/>\r\n                            <ButtonComponent stateList={this.state.ammoList} buttonTitleProp='5.7x28' listType=\"ammo\" backgroundThumbnail={P90}/>\r\n                            <ButtonComponent stateList={this.state.ammoList} buttonTitleProp='7.62x25' listType=\"ammo\" backgroundThumbnail={PPSH}/>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <ButtonComponent stateList={this.state.ammoList} buttonTitleProp='7.62x39' listType=\"ammo\" backgroundThumbnail={AK103}/>\r\n                            <ButtonComponent stateList={this.state.ammoList} buttonTitleProp='7.62x51' listType=\"ammo\" backgroundThumbnail={SR25}/>\r\n                            <ButtonComponent stateList={this.state.ammoList} buttonTitleProp='7.62x54' listType=\"ammo\" backgroundThumbnail={Mosin}/>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <ButtonComponent stateList={this.state.ammoList} buttonTitleProp='9x18' listType=\"ammo\" backgroundThumbnail={APS}/>\r\n                            <ButtonComponent stateList={this.state.ammoList} buttonTitleProp='9x19' listType=\"ammo\" backgroundThumbnail={Vector}/>\r\n                            <ButtonComponent stateList={this.state.ammoList} buttonTitleProp='9x21' listType=\"ammo\" backgroundThumbnail={Shrimp}/>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <ButtonComponent stateList={this.state.ammoList} buttonTitleProp='9x39' listType=\"ammo\" backgroundThumbnail={Asval}/>\r\n                            <ButtonComponent stateList={this.state.ammoList} buttonTitleProp='12.7x55' listType=\"ammo\" backgroundThumbnail={ASH}/>\r\n                            <ButtonComponent stateList={this.state.ammoList} buttonTitleProp='12x70' listType=\"ammo\" backgroundThumbnail={M590}/>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <ButtonComponent stateList={this.state.ammoList} buttonTitleProp='20x70' listType=\"ammo\" backgroundThumbnail={TOZ}/>\r\n                            <ButtonComponent stateList={this.state.ammoList} buttonTitleProp='23x75' listType=\"ammo\" backgroundThumbnail={KS23}/>\r\n                            <ButtonComponent stateList={this.state.ammoList} buttonTitleProp='.366' listType=\"ammo\" backgroundThumbnail={VPO}/>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )\r\n        } else {\r\n            return (\r\n                <div id='search-container'>\r\n                    <input class='input' name=\"ammo\" type='text' placeholder=\"What type of ammo do you need?\" value={this.state.input} onChange={this.handleChange} />\r\n                <div>\r\n                {this.state.ammoList.filter((ammo) => {\r\n            if(this.state.input === \"\") {\r\n                return null;\r\n            } else if (ammo.title.toLowerCase().includes(this.state.input.toLowerCase())) {\r\n                return ammo\r\n            }\r\n            }).map((ammo, index) => {\r\n                return (\r\n                    <div key={index} className=\"ammo-container search-result\">\r\n                        <div className=\"modal-row\">\r\n                        <img className='ammo-icon' src={ammo.icon} alt={ammo.title}/>\r\n                            <div className=\"modal-column ammo-info\">\r\n                                <p className=\"ammo-header\">{ammo.title}</p>\r\n                                <p className=\"ammo-tile\">D:{ammo.damage} P:{ammo.penetrationValue}</p>\r\n                                <p className=\"ammo-tile ammo-note\">{ammo.note}</p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                )})}\r\n                </div>\r\n            </div>\r\n            )\r\n        }\r\n    }\r\n}\r\n","C:\\Users\\jarro\\Desktop\\DEV\\PORTFOLIO\\portfolio 2020\\EFT-EXPRESS\\client\\src\\customsMap.js",["68","69","70","71","72"],"import React, { Component } from 'react'\r\nimport ReactDOM from 'react-dom';\r\nimport CustomsMapFile from './IMAGES/CUSTOMSMAP.png';\r\nimport { MapContainer, ImageOverlay, TileLayer, Marker, Popup } from 'react-leaflet'\r\nimport L from 'leaflet';\r\n\r\nexport default class customsMap extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.state = {\r\n            bounds: [1000, 1000]\r\n        };\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div id='mapid' >\r\n                <MapContainer center={[51.505, -0.09]} zoom={3} scrollWheelZoom={false} maxBounds={[[0,0], [500, 400]]}>\r\n                    <ImageOverlay url={CustomsMapFile} bounds={[[0,0], [500, 400]]}/>\r\n                </MapContainer>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","C:\\Users\\jarro\\Desktop\\DEV\\PORTFOLIO\\portfolio 2020\\EFT-EXPRESS\\client\\src\\App.js",[],"C:\\Users\\jarro\\Desktop\\DEV\\PORTFOLIO\\portfolio 2020\\EFT-EXPRESS\\client\\src\\keys.js",["73"],"import React, { Component } from 'react'\r\nimport axios from 'axios'; \r\nimport ButtonComponent from './buttonComponent'\r\nimport CustomsThumbnail from './IMAGES/CUSTOMS.png'\r\nimport WoodsThumbnail from './IMAGES/WOODS.png'\r\nimport InterchangeThumbnail from './IMAGES/INTERCHANGE.png'\r\nimport ShorelineThumbnail from './IMAGES/SHORELINE4.png';\r\nimport FactoryThumbnail from './IMAGES/FACTORY.png'\r\nimport LabsThumbnail from './IMAGES/LABS.jpg'\r\nimport ReserveThumbnail from './IMAGES/RESERVE.png'\r\n\r\nexport default class keys extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            input: '',\r\n            keyList: []\r\n        }\r\n\r\n\r\n        //Function binds\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.getKeyList = this.getKeyList.bind(this);\r\n    }\r\n\r\n    //CALLS AXIOS GET FUNCTION\r\n    componentDidMount = () => {\r\n        this.getKeyList();\r\n    }\r\n\r\n    //GETS KEYS FROM DB API\r\n    getKeyList = () => {\r\n        axios.get('/keys')\r\n            .then((response) => {\r\n                const data = response.data;\r\n                this.setState({keyList: data})\r\n                console.log('Key-Data has been received!');\r\n            })\r\n            .catch(() => {\r\n                console.log('Key-Data was not recieved.');\r\n            });  \r\n    }\r\n\r\n    //INPUT STORAGE\r\n    handleChange = (event) => {\r\n        this.setState({input: event.target.value});\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n\r\n\r\n        if(this.state.input === '') {\r\n            return (\r\n                <div>\r\n                        <input className='input' name=\"ammo\" type='text' placeholder=\"What key are you looking for?\" value={this.state.input} onChange={this.handleChange} />\r\n\r\n                    <div className = 'row' id=\"center-stuff\">\r\n                        <ButtonComponent stateList={this.state.keyList} buttonTitleProp='Customs' listType=\"keys\" backgroundThumbnail={CustomsThumbnail}/>\r\n                        <ButtonComponent stateList={this.state.keyList} buttonTitleProp='Interchange' listType=\"keys\" backgroundThumbnail={InterchangeThumbnail}/>\r\n                        <ButtonComponent stateList={this.state.keyList} buttonTitleProp='Factory' listType=\"keys\" backgroundThumbnail={FactoryThumbnail}/>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <ButtonComponent stateList={this.state.keyList} buttonTitleProp='Shoreline' listType=\"keys\" backgroundThumbnail={ShorelineThumbnail}/>\r\n                        <ButtonComponent stateList={this.state.keyList} buttonTitleProp='Reserve' listType=\"keys\" backgroundThumbnail={ReserveThumbnail}/>\r\n                        <ButtonComponent stateList={this.state.keyList} buttonTitleProp='Labs' listType=\"keys\" backgroundThumbnail={LabsThumbnail}/>\r\n\r\n                    </div>\r\n                    <div className=\"row\">\r\n                    <ButtonComponent stateList={this.state.keyList} buttonTitleProp='Woods' listType=\"keys\" backgroundThumbnail={WoodsThumbnail}/>\r\n                    </div>\r\n                </div>\r\n            )\r\n        } else {\r\n            return (\r\n                <div id=\"search-container\">\r\n                    <input class='input' name=\"keys\" type='text' placeholder=\"What key are you looking for?\" value={this.state.input} onChange={this.handleChange} />\r\n                <div>\r\n                {this.state.keyList.filter((key) => {\r\n            if(this.state.input === \"\") {\r\n                return null;\r\n            } else if (key.title.toLowerCase().includes(this.state.input.toLowerCase())) {\r\n                return key\r\n            }\r\n            }).map((key, index) => {\r\n                return (\r\n                    <div key={index} className=\"ammo-container search-result\">\r\n                        <div className=\"modal-row\">\r\n                            <img className='ammo-icon' src={key.icon} alt={key.title}/>\r\n                            <div className=\"modal-column key-info\">\r\n                                <p className=\"key-header\">{key.title}</p>\r\n                                <p className=\"key-tile key-spawns\">{key.spawns}</p>\r\n                                <p className=\"key-tile\">{key.usage}</p>\r\n\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                )})}\r\n                </div>\r\n            </div>\r\n            )\r\n        }\r\n    }\r\n}\r\n","C:\\Users\\jarro\\Desktop\\DEV\\PORTFOLIO\\portfolio 2020\\EFT-EXPRESS\\client\\src\\navbar.js",[],"C:\\Users\\jarro\\Desktop\\DEV\\PORTFOLIO\\portfolio 2020\\EFT-EXPRESS\\client\\src\\maps.js",[],"C:\\Users\\jarro\\Desktop\\DEV\\PORTFOLIO\\portfolio 2020\\EFT-EXPRESS\\client\\src\\buttonResults.js",["74","75"],"import React, { Component } from 'react'\r\n\r\nexport default class ButtonResults extends Component {\r\n    render() {\r\n        if(this.props.listType === \"ammo\") {\r\n            return (\r\n                <div id=\"simpleModal\" class=\"modal fadeIn\">\r\n                    <div class=\"modal-content\">\r\n                        <p className=\"ammo-header\">{this.props.stateList.filter((item) => item.type === this.props.buttonTitleProp).map((item, index) => {\r\n                            return (\r\n                                <div className = \"modal-row\">\r\n\r\n                                    <img className='ammo-icon' src={item.icon} />\r\n                                    <div className=\"modal-column ammo-info\">\r\n                                        <p className=\"ammo-header result\">{item.title}</p>\r\n                                        <p className=\"ammo-tile result\">D:{item.damage} P:{item.penetrationValue}</p>\r\n                                        <p className=\"ammo-tile ammo-note\">{item.note}</p>\r\n                                    </div>\r\n                                </div>\r\n                            )})}\r\n                        </p>\r\n                    </div>\r\n                </div>\r\n            )\r\n        } else if(this.props.listType === \"keys\") {\r\n            return (\r\n                <div id='simpleModal' class=\"modal\">\r\n                    <div class=\"modal-content\">\r\n                        <p className=\"key-header\">{this.props.stateList.filter((item) => item.maps === this.props.buttonTitleProp).map((item, index) => {\r\n                            return (\r\n                                <div className = \"modal-row\">\r\n\r\n                                    <img className='ammo-icon' src={item.icon} />\r\n                                    <div className=\"modal-column ammo-info\">\r\n                                        <p className=\"key-header result\">{item.title}</p>\r\n                                        <p className=\"key-tile result\">{item.spawns}</p>\r\n                                        <p className=\"key-tile key-spawns\">{item.usage}</p>\r\n                                    </div>\r\n                                </div>\r\n                            )})}\r\n                        </p>\r\n                    </div>\r\n                </div>  \r\n            )   \r\n        }\r\n    }\r\n}\r\n","C:\\Users\\jarro\\Desktop\\DEV\\PORTFOLIO\\portfolio 2020\\EFT-EXPRESS\\client\\src\\reportWebVitals.js",[],"C:\\Users\\jarro\\Desktop\\DEV\\PORTFOLIO\\portfolio 2020\\EFT-EXPRESS\\client\\src\\woodsMap.js",["76","77","78","79","80"],"import React, { Component } from 'react'\r\nimport ReactDOM from 'react-dom';\r\nimport WoodsMapFile from './IMAGES/WOODSMAP.png';\r\nimport { MapContainer, ImageOverlay, TileLayer, Marker, Popup } from 'react-leaflet'\r\nimport L from 'leaflet';\r\n\r\nexport default class WoodsMap extends Component {\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div id='mapid' >\r\n                <MapContainer center={[51.505, -0.09]} zoom={3} scrollWheelZoom={false} maxBounds={[[0,0], [500, 400]]}>\r\n                    <ImageOverlay url={WoodsMapFile} bounds={[[0,0], [500, 400]]}/>\r\n                    \r\n                </MapContainer>\r\n            </div>\r\n        )\r\n    }\r\n}","C:\\Users\\jarro\\Desktop\\DEV\\PORTFOLIO\\portfolio 2020\\EFT-EXPRESS\\client\\src\\home.js",["81","82"],"C:\\Users\\jarro\\Desktop\\DEV\\PORTFOLIO\\portfolio 2020\\EFT-EXPRESS\\client\\src\\threads.js",[],{"ruleId":"83","replacedBy":"84"},{"ruleId":"85","replacedBy":"86"},{"ruleId":"87","severity":1,"message":"88","line":55,"column":17,"nodeType":"89","endLine":55,"endColumn":91},{"ruleId":"83","replacedBy":"90"},{"ruleId":"85","replacedBy":"91"},{"ruleId":"92","severity":1,"message":"93","line":111,"column":52,"nodeType":"94","messageId":"95","endLine":111,"endColumn":54},{"ruleId":"96","severity":1,"message":"97","line":2,"column":8,"nodeType":"98","messageId":"99","endLine":2,"endColumn":16},{"ruleId":"96","severity":1,"message":"100","line":4,"column":38,"nodeType":"98","messageId":"99","endLine":4,"endColumn":47},{"ruleId":"96","severity":1,"message":"101","line":4,"column":49,"nodeType":"98","messageId":"99","endLine":4,"endColumn":55},{"ruleId":"96","severity":1,"message":"102","line":4,"column":57,"nodeType":"98","messageId":"99","endLine":4,"endColumn":62},{"ruleId":"96","severity":1,"message":"103","line":5,"column":8,"nodeType":"98","messageId":"99","endLine":5,"endColumn":9},{"ruleId":"92","severity":1,"message":"93","line":81,"column":50,"nodeType":"94","messageId":"95","endLine":81,"endColumn":52},{"ruleId":"104","severity":1,"message":"105","line":13,"column":37,"nodeType":"89","endLine":13,"endColumn":82},{"ruleId":"104","severity":1,"message":"105","line":33,"column":37,"nodeType":"89","endLine":33,"endColumn":82},{"ruleId":"96","severity":1,"message":"97","line":2,"column":8,"nodeType":"98","messageId":"99","endLine":2,"endColumn":16},{"ruleId":"96","severity":1,"message":"100","line":4,"column":38,"nodeType":"98","messageId":"99","endLine":4,"endColumn":47},{"ruleId":"96","severity":1,"message":"101","line":4,"column":49,"nodeType":"98","messageId":"99","endLine":4,"endColumn":55},{"ruleId":"96","severity":1,"message":"102","line":4,"column":57,"nodeType":"98","messageId":"99","endLine":4,"endColumn":62},{"ruleId":"96","severity":1,"message":"103","line":5,"column":8,"nodeType":"98","messageId":"99","endLine":5,"endColumn":9},{"ruleId":"96","severity":1,"message":"106","line":4,"column":8,"nodeType":"98","messageId":"99","endLine":4,"endColumn":15},{"ruleId":"107","severity":1,"message":"108","line":43,"column":31,"nodeType":"109","messageId":"110","endLine":43,"endColumn":33},"no-native-reassign",["111"],"no-negated-in-lhs",["112"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement",["111"],["112"],"array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","no-unused-vars","'ReactDOM' is defined but never used.","Identifier","unusedVar","'TileLayer' is defined but never used.","'Marker' is defined but never used.","'Popup' is defined but never used.","'L' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'Threads' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]